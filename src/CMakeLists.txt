set(
  SRC
  main.cpp
  teststate.cpp
  teststate.h
  EnginePrerequisites.h

  audio/audiobuffer.cpp
  audio/audiobuffer.h
  audio/audiodecoder.cpp
  audio/audiodecoder.h
  audio/audiolayer.cpp
  audio/audiolayer.h
  audio/audiomanager.cpp
  audio/audiomanager.h
  audio/audioreceptor.cpp
  audio/audioreceptor.h
  audio/audiosource.cpp
  audio/audiosource.h

  core/ogre/ogrelog.cpp
  core/ogre/ogrelog.h
  core/ogre/ogrelogmanager.cpp
  core/ogre/ogrelogmanager.h
  core/configfile.cpp
  core/configfile.h
  core/gameengine.cpp
  core/gameengine.h
  core/log.h
  core/logmanager.cpp
  core/logmanager.h
  core/pluginloader.h
  core/pluginmanager.cpp
  core/pluginmanager.h
  core/preferencemanager.cpp
  core/preferencemanager.h
  core/resourcemanager.cpp
  core/resourcemanager.h

  game/component.h
  game/eventlistener.h
  game/fixedcomponent.cpp
  game/fixedcomponent.h
  game/gamelayer.cpp
  game/gamelayer.h
  game/gamemanager.cpp
  game/gamemanager.h
  game/gameobject.cpp
  game/gameobject.h
  game/gamestate.cpp
  game/gamestate.h
  game/layermanager.cpp
  game/layermanager.h
  game/movablecomponent.cpp
  game/movablecomponent.h
  game/fixedcomponent.h
  game/scene.cpp
  game/scene.h
  game/scenemanager.cpp
  game/scenemanager.h

  input/inputmanager.h
  input/joylistener.h
  input/keylistener.h
  input/mouselistener.h
  input/oisinputmanager.cpp
  input/oisinputmanager.h

  math/matrix3.cpp
  math/matrix3.h
  math/quaternion.cpp
  math/quaternion.h
  math/vector3.cpp
  math/vector3.h
  math/unitconversor.h
  math/math.cpp
  math/math.h

  patterns/AbstractFactory.h
  patterns/AssociativeCollection.h
  patterns/SimpleCollection.h
  patterns/Singleton.h

  physics/btogre/BtOgre.cpp
  physics/btogre/BtOgreExtras.h
  physics/btogre/BtOgreGP.h
  physics/btogre/BtOgrePG.h
  physics/btogre/bulletrigidbody.cpp
  physics/btogre/bulletrigidbody.h
  physics/physicslayer.cpp
  physics/physicslayer.h
  physics/physicsmanager.cpp
  physics/physicsmanager.h
  physics/rigidbody.cpp
  physics/rigidbody.h

  render/ogre/oceanlistener.cpp
  render/ogre/oceanlistener.h
  render/ogre/ogrerendermanager.cpp
  render/ogre/ogrerendermanager.h
  render/ogre/ogrerenderwindow.cpp
  render/ogre/ogrerenderwindow.h
  render/cameracomponent.cpp
  render/cameracomponent.h
  render/colourvalue.cpp
  render/colourvalue.h
  render/entity.cpp
  render/entity.h
  render/light.cpp
  render/light.h
  render/oceansimulator.cpp
  render/oceansimulator.h
  render/realisticsky.cpp
  render/realisticsky.h
  render/rendercomponent.cpp
  render/rendercomponent.h
  render/renderlayer.cpp
  render/renderlayer.h
  render/renderlistener.h
  render/rendermanager.cpp
  render/rendermanager.h
  render/renderwindow.cpp
  render/renderwindow.h
  render/skeleton.cpp
  render/skeleton.h
  render/terrain.cpp
  render/terrain.h
  render/windowlistener.h
  render/guimanager.cpp
  render/guimanager.h

  net/nethost.cpp
  net/nethost.h
  net/netobject.cpp
  net/netobject.h

  demos/demo.cpp
  demos/demo.h
  demos/demomain.cpp
  demos/demomain.h
  demos/demointro.cpp
  demos/demointro.h
  demos/demodesign.cpp
  demos/demodesign.h
  demos/demomesh.cpp
  demos/demomesh.h
  demos/demophysics.cpp
  demos/demophysics.h
  demos/demoadvanced.cpp
  demos/demoadvanced.h
  demos/demonetserver.cpp
  demos/demonetserver.h
  demos/demonetclient.cpp
  demos/demonetclient.h
  )

add_executable(Caelum ${SRC})
set_target_properties(Caelum PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)
target_link_libraries(
  Caelum
  ${ENET_LIBRARIES}
  ${OGRE_LIBRARIES}
  ${SKYX_LIBRARIES}
  ${HYDRAX_LIBRARIES}
  #${PG_LIBRARIES}
  ${OIS_LIBRARIES}
  ${MYGUI_LIBRARIES}
  #${PSMOVE_LIBRARIES}
  ${BULLET_LIBRARIES}
  ${OPENAL_LIBRARIES}
  ${VORBIS_LIBRARIES}
  )
